use std::str::FromStr;

use alloy::{
    dyn_abi::{self, DynSolType, DynSolValue},
    hex,
    primitives::{Bytes, U256},
};
use alloy_sol_types::{SolCall, SolType};

use crate::universal_router_sdk::universal_router_commands::{
    Command, UniswapV3UniversalRouterCommand,
};

use super::structs::DecodeExecuteResult;

// execute function
pub fn build_execute_calldata(
    commands: Vec<UniswapV3UniversalRouterCommand>,
    deadline: u64,
) -> Vec<u8> {
    let mut commands_bytes: Vec<u8> = vec![];
    let mut inputs: Vec<Bytes> = vec![];
    let deadline = U256::from(deadline);

    for command in commands {
        commands_bytes.push(command.clone().try_into().unwrap());
        if let Some(encode) = command.encode() {
            inputs.push(encode.into());
        } else {
            panic!("command encode failed pls fix");
        }
    }
    let sol_call =
        crate::universal_router_sdk::universal_router_commands::UNIVERSAL_ROUTER::execute_1Call::new(
            (commands_bytes.into(), inputs.into(), deadline),
        );
    sol_call.abi_encode().to_vec()
}

pub fn build_execute_calldata_no_deadline(
    commands: Vec<UniswapV3UniversalRouterCommand>,
) -> Vec<u8> {
    let mut commands_bytes: Vec<u8> = vec![];
    let mut inputs: Vec<Bytes> = vec![];

    for command in commands {
        commands_bytes.push(command.clone().try_into().unwrap());
        if let Some(encode) = command.encode() {
            inputs.push(encode.into());
        } else {
            panic!("command encode failed pls fix");
        }
    }
    let data =
        crate::universal_router_sdk::universal_router_commands::UNIVERSAL_ROUTER::execute_0Call::new(
            (commands_bytes.into(), inputs.into()),
        );
    crate::universal_router_sdk::universal_router_commands::UNIVERSAL_ROUTER::execute_0Call::abi_encode(
        &data,
    )
    .to_vec()
}

pub fn execute_decode(call_data_hex: &str) -> DecodeExecuteResult {
    let call_data = hex::decode(call_data_hex).unwrap();
    let res = crate::universal_router_sdk::universal_router_commands::UNIVERSAL_ROUTER::execute_1Call::abi_decode(
        &call_data, false,
    )
    .unwrap();
    println!("{:?}", res.commands);
    println!("{:?}", res.inputs);
    println!("{}", res.deadline);
    DecodeExecuteResult {
        commands: res.commands,
        inputs: res.inputs,
        deadline: res.deadline,
    }
}

#[cfg(test)]
mod tests {
    use alloy::{hex, primitives::Address};

    use super::*;
    use crate::universal_router_sdk::universal_router_commands::{
        PayPortionParams, Permit2PermitParams, PermitDetails, PermitSingle, SweepParams,
        UnwrapWethParams, V2SwapExactInParams, WrapEthParams,
    };
    use std::str::FromStr;

    #[test]
    fn test_encode_decode_permit2_tx3() {
        let mut commands: Vec<UniswapV3UniversalRouterCommand> = vec![];
        // https://etherscan.io/tx/0x3b01f14e3c693d650474581dea684a954c25d663330667518b7e9fa13df10355
        {
            let permit_details = PermitDetails {
                token: Address::from_str("0x3e66c9a569efcf704391b54fd1eebd8ca0556960").unwrap(),
                amount: U256::from_str("1461501637330902918203684832716283019655932542975")
                    .unwrap(),
                expiration: U256::from(2045468047),
                nonce: U256::from(0u128),
            };
            let permit_single = PermitSingle {
                details: permit_details,
                spender: Address::from_str("0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad").unwrap(),
                sig_deadline: U256::from(2045468047),
            };
            let param = Permit2PermitParams {
            permit_single,
            signature: hex::decode("0x70fd040dace04d798eba1edb5013e6e3bb74d3bef794a0ac03d800417093d80e35624ca55bdd0a4a932497c7675274dccf7211a8d1d061f227bd8170991846301c").unwrap(),
        };
            commands.push(UniswapV3UniversalRouterCommand::Permit2Permit(param));
        }
        {
            let encode = V2SwapExactInParams {
                recipient: Address::from_str("0x0000000000000000000000000000000000000002").unwrap(),
                amount_in: U256::from_str("126736174293160000000000000000").unwrap(),
                min_amount_out: U256::from(38835972598566362u128),
                path: vec![
                    Address::from_str("0x3e66c9a569efcf704391b54fd1eebd8ca0556960").unwrap(),
                    Address::from_str("0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2").unwrap(),
                ],
                use_permit2: true,
            };
            commands.push(UniswapV3UniversalRouterCommand::V2SwapExactIn(encode));
        }
        {
            // 0x0c: UNWRAP_WETH
            let encode = UnwrapWethParams {
                recipient: Address::from_str("0x0000000000000000000000000000000000000002").unwrap(),
                min_amount_out: U256::from(38835972598566362u128),
            };
            commands.push(UniswapV3UniversalRouterCommand::UnwrapWeth(encode));
        }
        {
            // 0x06: PAY_PORTION
            let encode = PayPortionParams {
                token: Address::from_str("0x0000000000000000000000000000000000000000").unwrap(),
                recipient: Address::from_str("0xa74fa823bc8617fa320a966b3d11b0f722ef09ee").unwrap(),
                basis_points: U256::from(90),
            };
            commands.push(UniswapV3UniversalRouterCommand::PayPortion(encode));
        }
        {
            // 0x04: SWEEP
            let encode = SweepParams {
                token: Address::from_str("0x0000000000000000000000000000000000000000").unwrap(),
                recipient: Address::from_str("0x0000000000000000000000000000000000000001").unwrap(),
                min_amount_out: U256::from(38486448845179265u128),
            };
            commands.push(UniswapV3UniversalRouterCommand::Sweep(encode));
        }

        let encoded = build_execute_calldata(commands, 1729942074);
        assert_eq!(
            "3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000671cd23a00000000000000000000000000000000000000000000000000000000000000050a080c0604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000001600000000000000000000000003e66c9a569efcf704391b54fd1eebd8ca0556960000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000079eb5d8f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad0000000000000000000000000000000000000000000000000000000079eb5d8f00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004170fd040dace04d798eba1edb5013e6e3bb74d3bef794a0ac03d800417093d80e35624ca55bdd0a4a932497c7675274dccf7211a8d1d061f227bd8170991846301c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000019981b4cf0ea9f06bf24400000000000000000000000000000000000000000000000000000089f91c7f3e8dda00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000003e66c9a569efcf704391b54fd1eebd8ca0556960000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000089f91c7f3e8dda00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a74fa823bc8617fa320a966b3d11b0f722ef09ee000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000088bb38a8154981",
            hex::encode(encoded));
    }

    #[test]
    fn test_encode_tx3() {
        let mut commands: Vec<UniswapV3UniversalRouterCommand> = vec![];
        // https://etherscan.io/tx/0x3a121c4dc642573216df0a9eb86680dae517bec295928d379a41829b25515db5
        // wrapEthCall: 0x0000000000000000000000000000000000000002, 210000000000000000
        // v2SwapExactInCall: 0x0000000000000000000000000000000000000002, 210000000000000000, 0, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xc328a59e7321747aebbc49fd28d1b32c1af8d3b2], false
        // payPortionCall: 0xc328a59e7321747aebbc49fd28d1b32c1af8d3b2, 0x000000fee13a103a10d593b9ae06b3e05f2e7e1c, 25
        // sweepCall: 0xc328a59e7321747aebbc49fd28d1b32c1af8d3b2, 0x9adaf4fcd9a248e54051333584521e8231cfe2ad, 13582173608366753298733
        // WrapEth decodedV2SwapExactIn decodedPayPortion decodedSweep decoded
        {
            let encode = WrapEthParams {
                recipient: Address::from_str("0x0000000000000000000000000000000000000002").unwrap(),
                amount: U256::from(210000000000000000u128),
            };
            commands.push(UniswapV3UniversalRouterCommand::WrapEth(encode));
        }
        {
            let encode = V2SwapExactInParams {
                recipient: Address::from_str("0x0000000000000000000000000000000000000002").unwrap(),
                amount_in: U256::from_str("210000000000000000").unwrap(),
                min_amount_out: U256::from(0u128),
                path: vec![
                    Address::from_str("0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2").unwrap(),
                    Address::from_str("0xc328a59e7321747aebbc49fd28d1b32c1af8d3b2").unwrap(),
                ],
                use_permit2: false,
            };
            commands.push(UniswapV3UniversalRouterCommand::V2SwapExactIn(encode));
        }
        {
            // 0x06: PAY_PORTION
            let encode = PayPortionParams {
                token: Address::from_str("0xc328a59e7321747aebbc49fd28d1b32c1af8d3b2").unwrap(),
                recipient: Address::from_str("0x000000fee13a103a10d593b9ae06b3e05f2e7e1c").unwrap(),
                basis_points: U256::from(25),
            };
            commands.push(UniswapV3UniversalRouterCommand::PayPortion(encode));
        }
        {
            // 0x04: SWEEP
            let encode = SweepParams {
                token: Address::from_str("0xc328a59e7321747aebbc49fd28d1b32c1af8d3b2").unwrap(),
                recipient: Address::from_str("0x9adaf4fcd9a248e54051333584521e8231cfe2ad").unwrap(),
                min_amount_out: U256::from(13582173608366753298733u128),
            };
            commands.push(UniswapV3UniversalRouterCommand::Sweep(encode));
        }

        let encoded = build_execute_calldata(commands, 1730734598);
        assert_eq!(
            "3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006728ea0600000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000002ea11e32ad500000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000002ea11e32ad50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c328a59e7321747aebbc49fd28d1b32c1af8d3b20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c328a59e7321747aebbc49fd28d1b32c1af8d3b2000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c328a59e7321747aebbc49fd28d1b32c1af8d3b20000000000000000000000009adaf4fcd9a248e54051333584521e8231cfe2ad0000000000000000000000000000000000000000000002e04a85f75ea1d5b92d",
            hex::encode(encoded));
    }

    #[test]
    fn test_decode_uniswap_universal_router_tx_3() {
        // https://etherscan.io/tx/0xe94cd7a67142d496c4f54148b3f24c38e6e362b0b1f8d714b9f078d383efa507
        let calldata = "3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000067299dd800000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006a7eff1e2c355ad6eb91bebb5ded49257f3fed9800000000000000000000000000000000000000000000000000000000000000600000000000000000000000006a7eff1e2c355ad6eb91bebb5ded49257f3fed98000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000600000000000000000000000006a7eff1e2c355ad6eb91bebb5ded49257f3fed980000000000000000000000007f5c2032211407b822e8b4aa7cc59be2a9f792c400000000000000000000000000000000000000000000030699fe11c205b745f0";
        let res = execute_decode(&calldata);
        assert_eq!("0x0b080604", format!("{}", res.commands));
        assert_eq!(res.inputs.len(), 4);
        let expected_inputs = vec![
            "0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000b1a2bc2ec50000",
            "0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006a7eff1e2c355ad6eb91bebb5ded49257f3fed98",
            "0x0000000000000000000000006a7eff1e2c355ad6eb91bebb5ded49257f3fed98000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c0000000000000000000000000000000000000000000000000000000000000019",
            "0x0000000000000000000000006a7eff1e2c355ad6eb91bebb5ded49257f3fed980000000000000000000000007f5c2032211407b822e8b4aa7cc59be2a9f792c400000000000000000000000000000000000000000000030699fe11c205b745f0"
        ];
        assert_eq!(
            expected_inputs,
            res.inputs
                .iter()
                .map(|i| format!("{}", i))
                .collect::<Vec<String>>()
        );
        assert_eq!(res.deadline, U256::from(1730780632i128));
        // encode hex
        let sol_call = crate::universal_router_sdk::universal_router_commands::UNIVERSAL_ROUTER::execute_1Call::new((
            res.commands.into(),
            res.inputs.into(),
            res.deadline,
        ));
        let data = sol_call.abi_encode();
        assert_eq!(calldata, hex::encode(data));
    }
    #[test]
    fn test_decode_uniswap_universal_router_tx_1() {
        // https://etherscan.io/tx/0xe94cd7a67142d496c4f54148b3f24c38e6e362b0b1f8d714b9f078d383efa507
        let calldata = "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000192d5de5c8800000000000000000000000000000000000000000000000000000000000000040a08060400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000001600000000000000000000000004380ba39f7e0bb58b6294e348df8fdb5c90e20e3000000000000000000000000ffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000006747d8da00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad00000000000000000000000000000000000000000000000000000000672052e200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004122a3be4cd7423edf518f8fffff948b63d7ea7839a520d456369a5fd9f79d3ea715b82bf0d94ad905b5c3ee5182a557369bad922ff288cf41e636f90c74f1bde11b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000d96fb0a3f55ed4b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000004380ba39f7e0bb58b6294e348df8fdb5c90e20e3000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000000060000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000096c09d82f0abb07cd4dc27cda99e9234bc6affb10000000000000000000000000000000000000000000000000000000015137e6b0c";
        let res = execute_decode(&calldata);
        assert_eq!("0x0a080604", format!("{}", res.commands));
        assert_eq!(res.inputs.len(), 4);
        let expected_inputs = vec![
            "0x0000000000000000000000004380ba39f7e0bb58b6294e348df8fdb5c90e20e3000000000000000000000000ffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000006747d8da00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad00000000000000000000000000000000000000000000000000000000672052e200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004122a3be4cd7423edf518f8fffff948b63d7ea7839a520d456369a5fd9f79d3ea715b82bf0d94ad905b5c3ee5182a557369bad922ff288cf41e636f90c74f1bde11b00000000000000000000000000000000000000000000000000000000000000",
            "0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000d96fb0a3f55ed4b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000004380ba39f7e0bb58b6294e348df8fdb5c90e20e3000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7",
            "0x000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c0000000000000000000000000000000000000000000000000000000000000019",
            "0x000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000096c09d82f0abb07cd4dc27cda99e9234bc6affb10000000000000000000000000000000000000000000000000000000015137e6b"
        ];
        assert_eq!(
            expected_inputs,
            res.inputs
                .iter()
                .map(|i| format!("{}", i))
                .collect::<Vec<String>>()
        );
        assert_eq!(res.deadline, U256::from(1730164972680i128));
        // to string
        let res_str = res.to_string();
        println!("{}", res_str);
    }

    // test decode
    // wrapEthCall: 0x0000000000000000000000000000000000000002, 4000000000000000000
    // v2SwapExactInCall: 0x0000000000000000000000000000000000000002, 3600000000000000000, 0, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x1121acc14c63f3c872bfca497d10926a6098aac5], false
    // v3SwapExactInCall: 0x0000000000000000000000000000000000000002, 400000000000000000, 0, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20027101121acc14c63f3c872bfca497d10926a6098aac5, false
    // payPortionCall: 0x1121acc14c63f3c872bfca497d10926a6098aac5, 0x000000fee13a103a10d593b9ae06b3e05f2e7e1c, 25
    // sweepCall: 0x1121acc14c63f3c872bfca497d10926a6098aac5, 0xc0603f5cca3d74bc8049614f8089c5a165c3160e, 143293272479182942806137
    // WrapEth decodedV2SwapExactIn decodedV3SwapExactIn decodedPayPortion decodedSweep decoded

    //     wrapEthCall: 0x0000000000000000000000000000000000000002, 4000000000000000000
    // v2SwapExactInCall: 0x0000000000000000000000000000000000000002, 3600000000000000000, 0, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x1121acc14c63f3c872bfca497d10926a6098aac5], false
    // v3SwapExactInCall: 0x0000000000000000000000000000000000000002, 4000000000000000000, 0, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20027101121acc14c63f3c872bfca497d10926a6098aac5, false
    // payPortionCall: 0x1121acc14c63f3c872bfca497d10926a6098aac5, 0x000000fee13a103a10d593b9ae06b3e05f2e7e1c, 25
    // sweepCall: 0x1121acc14c63f3c872bfca497d10926a6098aac5, 0xc0603f5cca3d74bc8049614f8089c5a165c3160e, 143293272479182942806137
    // WrapEth decodedV2SwapExactIn decodedV3SwapExactIn decodedPayPortion decodedSweep decoded
}
